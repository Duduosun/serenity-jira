import net.serenitybdd.builds.ProjectVersionCounter

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://geonet.artifactoryonline.com/geonet/public-releases'
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenLocal()
        jcenter()
    }


    ext {
        serenityCoreVersion = "1.0.30"
        bintrayBaseUrl = 'https://api.bintray.com/maven'
        bintrayRepository = 'maven'
        bintrayPackage = 'serenity-jira'
        projectDescription = 'Serenity jira libraries'
        if (!project.hasProperty("bintrayUsername")) {
            bintrayUsername = 'wakaleo'
        }
        if (!project.hasProperty("bintrayApiKey")) {
            bintrayApiKey = ''
        }
        versionCounter = new ProjectVersionCounter(isRelease: project.hasProperty("releaseBuild"))
    }
    group = 'net.serenity-bdd'
    version = versionCounter.nextVersion

    group = 'net.serenity-bdd'
    version = versionCounter.nextVersion


    task createNewVersionTag(type: Exec) {
        executable "sh"
        args "-c", "git tag -f -a v$version -m'release tag'"
    }

    task pushVersionTag(type: Exec, dependsOn: 'createNewVersionTag') {
        executable "sh"
        args "-c", "git push -f origin v$version"
    }

    task tagNewVersion() {
        dependsOn pushVersionTag
    }

    sourceSets.main.java.srcDirs = []
    sourceSets.main.groovy.srcDirs += ["src/main/java"]

    task wrapper(type: Wrapper) {
        gradleVersion = '2.1'
    }

    test {
        exclude '**/*$*'
        exclude '**/integration/**'
        exclude '**/localhost/**'
        exclude '**/samples/**'
        exclude '**/*Sample*'
        minHeapSize = "128m"
        maxHeapSize = "512m"
        maxParallelForks = 4
    }

    task integrationTests(type: Test) {
        exclude '**/*$*'
        exclude '**/samples/**'
        exclude '**/*Sample*'
        exclude '**/integration/browsers**'
        exclude '**/localhost/**'
        include '**/integration/**'
        reports.junitXml.destination = "${buildDir}/reports/integration-tests"
        reports.html.destination = "${buildDir}/reports/integration-tests"
        minHeapSize = "128m"
        maxHeapSize = "2048m"
        jvmArgs '-XX:MaxPermSize=256m'
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    integrationTests {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    task browserTests(type: Test) {
        exclude '**/*$*'
        exclude '**/samples/**'
        exclude '**/*Sample*'
        exclude '**/*Base'
        include '**/integration/browsers/**'
    }

    task javadoc(type: Javadoc, overwrite:true) {
        source = sourceSets.main.allJava
        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.addStringOption('views')
        options.addStringOption('all')
        options.addStringOption('quiet')
        options.addStringOption('qualify')
        options.addStringOption('Xdoclint:none')
        options.encoding = 'UTF-8'
        classpath = configurations.compile
    }

//    integrationTests.dependsOn test
    check.dependsOn -= integrationTests


    dependencies {
//        compile localGroovy()
        compile "net.serenity-bdd:core:$serenityCoreVersion"
        compile "com.google.inject:guice:3.0"
        compile "com.google.guava:guava:18.0"
        compile "org.slf4j:slf4j-api:1.6.4"
        compile "org.codehaus.groovy:groovy-all:2.3.6"

        testCompile "ch.qos.logback:logback-classic:1.0.13"
        testCompile "net.serenity-bdd:serenity-test-utils:$serenityCoreVersion"

        testCompile "junit:junit:4.11"
        testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
            exclude group: "junit"
        }
        testCompile("com.github.goldin:spock-extensions:0.1.4") {
            exclude module: "spock-core"
        }
    }

    bintray {
        user = bintrayUsername //this usually comes form gradle.properties file in ~/.gradle
        key = bintrayApiKey //this usually comes form gradle.properties file in ~/.gradle
        publications = ['mavenJava'] // see publications closure
        pkg {
            repo = 'maven'
            userOrg = 'serenity'
            name = 'serenity-jira'
            desc = 'Serenity JIRA libraries'
            licenses = ['Apache-2.0']
            labels = ['serenity','bdd','jira']
        }
    }

    task release() {
        dependsOn bintrayUpload
    }

}

subprojects {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {

                println "Publishing $project.name:$project.group:$project.version"

                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name "$project.name"
                        description "$projectDescription"

                        url 'https://github.com/serenity-bdd/$project.name'
                        scm {
                            url 'scm:git:git@github.com:serenity-bdd/$project.name.git'
                            connection 'scm:git:git@github.com:serenity-bdd/$project.name.git'
                            developerConnection 'scm:git:git@github.com:serenity-bdd/$project.name.git'
                        }
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'johnsmart'
                                name 'John Ferguson Smart'
                                email 'john.smart@wakaleo.com'
                            }
                        }
                    }
                    // Preserve compile-scope dependencies
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:-options"
    }
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}
