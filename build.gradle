buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://geonet.artifactoryonline.com/geonet/public-releases'
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'org.ajoberstar:gradle-git:1.2.0'
        classpath 'org.pegdown:pegdown:1.4.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }
}

apply plugin: 'org.ajoberstar.release-opinion'

import org.ajoberstar.grgit.Grgit
import org.ajoberstar.gradle.git.release.opinion.Strategies

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

ext {
    serenityCoreVersion = "1.1.17-rc.3"

    // Bintray configuration
    bintrayBaseUrl = 'https://api.bintray.com/maven'
    bintrayRepository = 'maven'
    bintrayPackage = 'serenity-jira'
    projectDescription = 'Serenity JIRA Integration'

    if (!project.hasProperty("bintrayUsername")) {
        bintrayUsername = 'wakaleo'
    }
    if (!project.hasProperty("bintrayApiKey")) {
        bintrayApiKey = ''
    }
}

allprojects {
    apply plugin: 'project-report'
    apply plugin: 'com.github.ben-manes.versions'

    configurations.all {
        resolutionStrategy {
            // fail fast on dependency convergence problems
            failOnVersionConflict()
        }
    }
}

release {
    grgit = Grgit.open(project.file('.'))

    versionStrategy Strategies.FINAL
    versionStrategy Strategies.PRE_RELEASE
    defaultVersionStrategy Strategies.SNAPSHOT
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenLocal()
        jcenter()
    }


    tasks.withType(GroovyCompile) {
        options.encoding = "UTF-8" // for Java compilation
        groovyOptions.encoding = "UTF-8" // for Groovy compilation
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:-options"
        options.encoding = 'UTF-8'
    }
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {

                println "Publishing $project.name:$project.group:$project.version"

                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name "$project.name"
                        description "$projectDescription"

                        url 'https://github.com/serenity-bdd/serenity-jira'
                        scm {
                            url 'scm:git:git@github.com:serenity-bdd/serenity-jira.git'
                            connection 'scm:git:git@github.com:serenity-bdd/serenity-jira.git'
                            developerConnection 'scm:git:git@github.com:serenity-bdd/serenity-jira.git'
                        }
                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'johnsmart'
                                name 'John Ferguson Smart'
                                email 'john.smart@wakaleo.com'
                            }
                        }
                    }
                    // Preserve compile-scope dependencies
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
        }

        test {
            exclude '**/*$*'
            exclude '**/integration/**'
            exclude '**/localhost/**'
            exclude '**/samples/**'
            exclude '**/*Sample*'
            minHeapSize = "128m"
            maxHeapSize = "512m"
            maxParallelForks = 4
        }

        task integrationTests(type: Test) {
            exclude '**/*$*'
            exclude '**/samples/**'
            exclude '**/*Sample*'
            exclude '**/integration/browsers**'
            exclude '**/localhost/**'
            include '**/integration/**'
            reports.junitXml.destination = "${buildDir}/reports/integration-tests"
            reports.html.destination = "${buildDir}/reports/integration-tests"
            minHeapSize = "128m"
            maxHeapSize = "2048m"
            jvmArgs '-XX:MaxPermSize=256m'
        }

        test {
            testLogging {
                exceptionFormat = 'full'
            }
        }

        integrationTests {
            testLogging {
                exceptionFormat = 'full'
            }
        }

        task javadoc(type: Javadoc, overwrite: true) {
            source = sourceSets.main.allJava
            options.memberLevel = JavadocMemberLevel.PUBLIC
            options.addStringOption('views')
            options.addStringOption('all')
            options.addStringOption('quiet')
            options.addStringOption('qualify')
            options.addStringOption('Xdoclint:none')
            options.encoding = 'UTF-8'
            classpath = configurations.compile
        }

        check.dependsOn -= integrationTests


        dependencies {
            compile "net.serenity-bdd:serenity-core:$serenityCoreVersion"
            compile "com.google.inject:guice:3.0"
            compile "com.google.guava:guava:18.0"
            compile "org.slf4j:slf4j-api:1.7.7"
            compile "org.codehaus.groovy:groovy-all:2.3.10"

            testCompile "ch.qos.logback:logback-classic:1.0.13"
            testCompile "net.serenity-bdd:serenity-test-utils:$serenityCoreVersion"

            testCompile "junit:junit:4.11"
            testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
                exclude group: "junit"
            }
            testCompile("com.github.goldin:spock-extensions:0.1.4") {
                exclude module: "spock-core"
            }
        }

       }
}